{"ast":null,"code":"var getFilteredExpenses = function getFilteredExpenses(expenses, filter) {\n  if (expenses.length > 0) {\n    return expenses.filter(function (item) {\n      // let startDateMatch = item.createdAt >= filter.startDate;\n      // let endDateMatch = item.createdAt <= filter.endDate;\n      var textMatch = item.description.toLowerCase().includes(filter.text.toLowerCase());\n      return textMatch;\n    }).sort(function (a, b) {\n      if (filter.sortBy === 'date') {\n        return a.createdAt < b.createdAt ? 1 : -1;\n      } else if (filter.sortBy === 'amount') {\n        return a.amount < b.amount ? 1 : -1;\n      } else {\n        return 1;\n      }\n    });\n  } else {\n    return [];\n  }\n};\n\nexport default getFilteredExpenses;","map":{"version":3,"sources":["/Users/mac/Desktop/ReactTutorial/Projects/redux-project/src/helpers/sort.js"],"names":["getFilteredExpenses","expenses","filter","length","item","textMatch","description","toLowerCase","includes","text","sort","a","b","sortBy","createdAt","amount"],"mappings":"AAAA,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,QAAD,EAAWC,MAAX,EAAsB;AAChD,MAAID,QAAQ,CAACE,MAAT,GAAkB,CAAtB,EAAyB;AACvB,WAAOF,QAAQ,CAACC,MAAT,CAAgB,UAACE,IAAD,EAAU;AAE/B;AACA;AACA,UAAIC,SAAS,GAAGD,IAAI,CAACE,WAAL,CAAiBC,WAAjB,GAA+BC,QAA/B,CAAwCN,MAAM,CAACO,IAAP,CAAYF,WAAZ,EAAxC,CAAhB;AAEA,aAAOF,SAAP;AAED,KARM,EAQJK,IARI,CAQC,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAChB,UAAIV,MAAM,CAACW,MAAP,KAAkB,MAAtB,EAA8B;AAC5B,eAAOF,CAAC,CAACG,SAAF,GAAcF,CAAC,CAACE,SAAhB,GAA4B,CAA5B,GAAgC,CAAC,CAAxC;AACD,OAFD,MAGK,IAAIZ,MAAM,CAACW,MAAP,KAAkB,QAAtB,EAAgC;AACnC,eAAOF,CAAC,CAACI,MAAF,GAAWH,CAAC,CAACG,MAAb,GAAsB,CAAtB,GAA0B,CAAC,CAAlC;AACD,OAFI,MAGD;AACF,eAAO,CAAP;AACD;AACF,KAlBM,CAAP;AAmBD,GApBD,MAqBK;AACH,WAAO,EAAP;AACD;AACF,CAzBD;;AA0BA,eAAef,mBAAf","sourcesContent":["const getFilteredExpenses = (expenses, filter) => {\n  if (expenses.length > 0) {\n    return expenses.filter((item) => {\n\n      // let startDateMatch = item.createdAt >= filter.startDate;\n      // let endDateMatch = item.createdAt <= filter.endDate;\n      let textMatch = item.description.toLowerCase().includes(filter.text.toLowerCase());\n\n      return textMatch;\n\n    }).sort((a, b) => {\n      if (filter.sortBy === 'date') {\n        return a.createdAt < b.createdAt ? 1 : -1;\n      }\n      else if (filter.sortBy === 'amount') {\n        return a.amount < b.amount ? 1 : -1\n      }\n      else{\n        return 1;\n      }\n    });\n  }\n  else {\n    return [];\n  }\n}\nexport default getFilteredExpenses;\n"]},"metadata":{},"sourceType":"module"}