{"ast":null,"code":"import _objectSpread from \"/Users/mac/Desktop/ReactTutorial/Projects/redux-project/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n// import React from 'react';\n// import ReactDOM from 'react-dom';\nimport './index.css'; //import App from './App';\n\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nvar initialState = {\n  count: 0\n};\nvar store = createStore(function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"INCREMENT\":\n      return _objectSpread({}, state, {\n        count: state.count + action.payload\n      });\n\n    case \"DECREMENT\":\n      return _objectSpread({}, state, {\n        count: state.count - action.payload\n      });\n\n    case \"RESET\":\n      return _objectSpread({}, state, {\n        count: 0\n      });\n\n    default:\n      return _objectSpread({}, state);\n  }\n}); //Increment the count\n\nstore.dispatch({\n  type: \"DECREMENT\",\n  payload: 3\n});\nconsole.log(store.getState()); //ReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/mac/Desktop/ReactTutorial/Projects/redux-project/src/index.js"],"names":["serviceWorker","createStore","initialState","count","store","state","action","type","payload","dispatch","console","log","getState","unregister"],"mappings":";AAAA;AACA;AACA,OAAO,aAAP,C,CACA;;AACA,OAAO,KAAKA,aAAZ,MAA+B,iBAA/B;AACA,SAASC,WAAT,QAA4B,OAA5B;AAEA,IAAMC,YAAY,GAAG;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAArB;AAEA,IAAMC,KAAK,GAAGH,WAAW,CAAC,YAAkC;AAAA,MAAjCI,KAAiC,uEAAzBH,YAAyB;AAAA,MAAXI,MAAW;;AAC1D,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,WAAL;AACE,+BACKF,KADL;AAEEF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAcG,MAAM,CAACE;AAF9B;;AAIF,SAAK,WAAL;AACE,+BACKH,KADL;AAEEF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,GAAcG,MAAM,CAACE;AAF9B;;AAIF,SAAK,OAAL;AACE,+BACKH,KADL;AAEEF,QAAAA,KAAK,EAAE;AAFT;;AAIF;AACE,+BAAWE,KAAX;AAjBJ;AAmBD,CApBwB,CAAzB,C,CAsBA;;AACAD,KAAK,CAACK,QAAN,CAAe;AAAEF,EAAAA,IAAI,EAAE,WAAR;AAAqBC,EAAAA,OAAO,EAAE;AAA9B,CAAf;AAEAE,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACQ,QAAN,EAAZ,E,CAOA;AACA;AACA;AACA;;AACAZ,aAAa,CAACa,UAAd","sourcesContent":["// import React from 'react';\n// import ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\n\nconst initialState = { count: 0 };\n\nconst store = createStore((state = initialState, action) => {\n  switch (action.type) {\n    case \"INCREMENT\":\n      return {\n        ...state,\n        count: state.count + action.payload\n      }\n    case \"DECREMENT\":\n      return {\n        ...state,\n        count: state.count - action.payload\n      }\n    case \"RESET\":\n      return {\n        ...state,\n        count: 0\n      }\n    default:\n      return {...state}\n  }\n});\n\n//Increment the count\nstore.dispatch({ type: \"DECREMENT\", payload: 3});\n\nconsole.log(store.getState());\n\n\n\n\n\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}