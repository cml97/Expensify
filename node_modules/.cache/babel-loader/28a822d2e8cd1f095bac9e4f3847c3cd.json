{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _reactMomentProptypes = require('react-moment-proptypes');\n\nvar _reactMomentProptypes2 = _interopRequireDefault(_reactMomentProptypes);\n\nvar _airbnbPropTypes = require('airbnb-prop-types');\n\nvar _OpenDirectionShape = require('../shapes/OpenDirectionShape');\n\nvar _OpenDirectionShape2 = _interopRequireDefault(_OpenDirectionShape);\n\nvar _defaultPhrases = require('../defaultPhrases');\n\nvar _getPhrasePropTypes = require('../utils/getPhrasePropTypes');\n\nvar _getPhrasePropTypes2 = _interopRequireDefault(_getPhrasePropTypes);\n\nvar _DateRangePickerInput = require('./DateRangePickerInput');\n\nvar _DateRangePickerInput2 = _interopRequireDefault(_DateRangePickerInput);\n\nvar _IconPositionShape = require('../shapes/IconPositionShape');\n\nvar _IconPositionShape2 = _interopRequireDefault(_IconPositionShape);\n\nvar _DisabledShape = require('../shapes/DisabledShape');\n\nvar _DisabledShape2 = _interopRequireDefault(_DisabledShape);\n\nvar _toMomentObject = require('../utils/toMomentObject');\n\nvar _toMomentObject2 = _interopRequireDefault(_toMomentObject);\n\nvar _toLocalizedDateString = require('../utils/toLocalizedDateString');\n\nvar _toLocalizedDateString2 = _interopRequireDefault(_toLocalizedDateString);\n\nvar _isInclusivelyAfterDay = require('../utils/isInclusivelyAfterDay');\n\nvar _isInclusivelyAfterDay2 = _interopRequireDefault(_isInclusivelyAfterDay);\n\nvar _isBeforeDay = require('../utils/isBeforeDay');\n\nvar _isBeforeDay2 = _interopRequireDefault(_isBeforeDay);\n\nvar _baseClass = require('../utils/baseClass');\n\nvar _baseClass2 = _interopRequireDefault(_baseClass);\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar propTypes = (0, _airbnbPropTypes.forbidExtraProps)({\n  startDate: _reactMomentProptypes2['default'].momentObj,\n  startDateId: _propTypes2['default'].string,\n  startDatePlaceholderText: _propTypes2['default'].string,\n  isStartDateFocused: _propTypes2['default'].bool,\n  endDate: _reactMomentProptypes2['default'].momentObj,\n  endDateId: _propTypes2['default'].string,\n  endDatePlaceholderText: _propTypes2['default'].string,\n  isEndDateFocused: _propTypes2['default'].bool,\n  screenReaderMessage: _propTypes2['default'].string,\n  showClearDates: _propTypes2['default'].bool,\n  showCaret: _propTypes2['default'].bool,\n  showDefaultInputIcon: _propTypes2['default'].bool,\n  inputIconPosition: _IconPositionShape2['default'],\n  disabled: _DisabledShape2['default'],\n  required: _propTypes2['default'].bool,\n  readOnly: _propTypes2['default'].bool,\n  openDirection: _OpenDirectionShape2['default'],\n  noBorder: _propTypes2['default'].bool,\n  block: _propTypes2['default'].bool,\n  small: _propTypes2['default'].bool,\n  regular: _propTypes2['default'].bool,\n  verticalSpacing: _airbnbPropTypes.nonNegativeInteger,\n  keepOpenOnDateSelect: _propTypes2['default'].bool,\n  reopenPickerOnClearDates: _propTypes2['default'].bool,\n  withFullScreenPortal: _propTypes2['default'].bool,\n  minimumNights: _airbnbPropTypes.nonNegativeInteger,\n  isOutsideRange: _propTypes2['default'].func,\n  displayFormat: _propTypes2['default'].oneOfType([_propTypes2['default'].string, _propTypes2['default'].func]),\n  onFocusChange: _propTypes2['default'].func,\n  onClose: _propTypes2['default'].func,\n  onDatesChange: _propTypes2['default'].func,\n  onKeyDownArrowDown: _propTypes2['default'].func,\n  onKeyDownQuestionMark: _propTypes2['default'].func,\n  customInputIcon: _propTypes2['default'].node,\n  customArrowIcon: _propTypes2['default'].node,\n  customCloseIcon: _propTypes2['default'].node,\n  // accessibility\n  isFocused: _propTypes2['default'].bool,\n  // i18n\n  phrases: _propTypes2['default'].shape((0, _getPhrasePropTypes2['default'])(_defaultPhrases.DateRangePickerInputPhrases)),\n  isRTL: _propTypes2['default'].bool\n});\nvar defaultProps = {\n  startDate: null,\n  startDateId: _constants.START_DATE,\n  startDatePlaceholderText: 'Start Date',\n  isStartDateFocused: false,\n  endDate: null,\n  endDateId: _constants.END_DATE,\n  endDatePlaceholderText: 'End Date',\n  isEndDateFocused: false,\n  screenReaderMessage: '',\n  showClearDates: false,\n  showCaret: false,\n  showDefaultInputIcon: false,\n  inputIconPosition: _constants.ICON_BEFORE_POSITION,\n  disabled: false,\n  required: false,\n  readOnly: false,\n  openDirection: _constants.OPEN_DOWN,\n  noBorder: false,\n  block: false,\n  small: false,\n  regular: false,\n  verticalSpacing: undefined,\n  keepOpenOnDateSelect: false,\n  reopenPickerOnClearDates: false,\n  withFullScreenPortal: false,\n  minimumNights: 1,\n  isOutsideRange: function () {\n    function isOutsideRange(day) {\n      return !(0, _isInclusivelyAfterDay2['default'])(day, (0, _moment2['default'])());\n    }\n\n    return isOutsideRange;\n  }(),\n  displayFormat: function () {\n    function displayFormat() {\n      return _moment2['default'].localeData().longDateFormat('L');\n    }\n\n    return displayFormat;\n  }(),\n  onFocusChange: function () {\n    function onFocusChange() {}\n\n    return onFocusChange;\n  }(),\n  onClose: function () {\n    function onClose() {}\n\n    return onClose;\n  }(),\n  onDatesChange: function () {\n    function onDatesChange() {}\n\n    return onDatesChange;\n  }(),\n  onKeyDownArrowDown: function () {\n    function onKeyDownArrowDown() {}\n\n    return onKeyDownArrowDown;\n  }(),\n  onKeyDownQuestionMark: function () {\n    function onKeyDownQuestionMark() {}\n\n    return onKeyDownQuestionMark;\n  }(),\n  customInputIcon: null,\n  customArrowIcon: null,\n  customCloseIcon: null,\n  // accessibility\n  isFocused: false,\n  // i18n\n  phrases: _defaultPhrases.DateRangePickerInputPhrases,\n  isRTL: false\n};\n/** @extends React.Component */\n\nvar DateRangePickerInputController = function (_BaseClass) {\n  _inherits(DateRangePickerInputController, _BaseClass);\n\n  function DateRangePickerInputController(props) {\n    _classCallCheck(this, DateRangePickerInputController);\n\n    var _this = _possibleConstructorReturn(this, (DateRangePickerInputController.__proto__ || Object.getPrototypeOf(DateRangePickerInputController)).call(this, props));\n\n    _this.onClearFocus = _this.onClearFocus.bind(_this);\n    _this.onStartDateChange = _this.onStartDateChange.bind(_this);\n    _this.onStartDateFocus = _this.onStartDateFocus.bind(_this);\n    _this.onEndDateChange = _this.onEndDateChange.bind(_this);\n    _this.onEndDateFocus = _this.onEndDateFocus.bind(_this);\n    _this.clearDates = _this.clearDates.bind(_this);\n    return _this;\n  }\n\n  _createClass(DateRangePickerInputController, [{\n    key: 'onClearFocus',\n    value: function () {\n      function onClearFocus() {\n        var _props = this.props,\n            onFocusChange = _props.onFocusChange,\n            onClose = _props.onClose,\n            startDate = _props.startDate,\n            endDate = _props.endDate;\n        onFocusChange(null);\n        onClose({\n          startDate: startDate,\n          endDate: endDate\n        });\n      }\n\n      return onClearFocus;\n    }()\n  }, {\n    key: 'onEndDateChange',\n    value: function () {\n      function onEndDateChange(endDateString) {\n        var _props2 = this.props,\n            startDate = _props2.startDate,\n            isOutsideRange = _props2.isOutsideRange,\n            minimumNights = _props2.minimumNights,\n            keepOpenOnDateSelect = _props2.keepOpenOnDateSelect,\n            onDatesChange = _props2.onDatesChange;\n        var endDate = (0, _toMomentObject2['default'])(endDateString, this.getDisplayFormat());\n        var isEndDateValid = endDate && !isOutsideRange(endDate) && !(startDate && (0, _isBeforeDay2['default'])(endDate, startDate.clone().add(minimumNights, 'days')));\n\n        if (isEndDateValid) {\n          onDatesChange({\n            startDate: startDate,\n            endDate: endDate\n          });\n          if (!keepOpenOnDateSelect) this.onClearFocus();\n        } else {\n          onDatesChange({\n            startDate: startDate,\n            endDate: null\n          });\n        }\n      }\n\n      return onEndDateChange;\n    }()\n  }, {\n    key: 'onEndDateFocus',\n    value: function () {\n      function onEndDateFocus() {\n        var _props3 = this.props,\n            startDate = _props3.startDate,\n            onFocusChange = _props3.onFocusChange,\n            withFullScreenPortal = _props3.withFullScreenPortal,\n            disabled = _props3.disabled;\n\n        if (!startDate && withFullScreenPortal && (!disabled || disabled === _constants.END_DATE)) {\n          // When the datepicker is full screen, we never want to focus the end date first\n          // because there's no indication that that is the case once the datepicker is open and it\n          // might confuse the user\n          onFocusChange(_constants.START_DATE);\n        } else if (!disabled || disabled === _constants.START_DATE) {\n          onFocusChange(_constants.END_DATE);\n        }\n      }\n\n      return onEndDateFocus;\n    }()\n  }, {\n    key: 'onStartDateChange',\n    value: function () {\n      function onStartDateChange(startDateString) {\n        var endDate = this.props.endDate;\n        var _props4 = this.props,\n            isOutsideRange = _props4.isOutsideRange,\n            minimumNights = _props4.minimumNights,\n            onDatesChange = _props4.onDatesChange,\n            onFocusChange = _props4.onFocusChange,\n            disabled = _props4.disabled;\n        var startDate = (0, _toMomentObject2['default'])(startDateString, this.getDisplayFormat());\n        var isEndDateBeforeStartDate = startDate && (0, _isBeforeDay2['default'])(endDate, startDate.clone().add(minimumNights, 'days'));\n        var isStartDateValid = startDate && !isOutsideRange(startDate) && !(disabled === _constants.END_DATE && isEndDateBeforeStartDate);\n\n        if (isStartDateValid) {\n          if (isEndDateBeforeStartDate) {\n            endDate = null;\n          }\n\n          onDatesChange({\n            startDate: startDate,\n            endDate: endDate\n          });\n          onFocusChange(_constants.END_DATE);\n        } else {\n          onDatesChange({\n            startDate: null,\n            endDate: endDate\n          });\n        }\n      }\n\n      return onStartDateChange;\n    }()\n  }, {\n    key: 'onStartDateFocus',\n    value: function () {\n      function onStartDateFocus() {\n        var _props5 = this.props,\n            disabled = _props5.disabled,\n            onFocusChange = _props5.onFocusChange;\n\n        if (!disabled || disabled === _constants.END_DATE) {\n          onFocusChange(_constants.START_DATE);\n        }\n      }\n\n      return onStartDateFocus;\n    }()\n  }, {\n    key: 'getDisplayFormat',\n    value: function () {\n      function getDisplayFormat() {\n        var displayFormat = this.props.displayFormat;\n        return typeof displayFormat === 'string' ? displayFormat : displayFormat();\n      }\n\n      return getDisplayFormat;\n    }()\n  }, {\n    key: 'getDateString',\n    value: function () {\n      function getDateString(date) {\n        var displayFormat = this.getDisplayFormat();\n\n        if (date && displayFormat) {\n          return date && date.format(displayFormat);\n        }\n\n        return (0, _toLocalizedDateString2['default'])(date);\n      }\n\n      return getDateString;\n    }()\n  }, {\n    key: 'clearDates',\n    value: function () {\n      function clearDates() {\n        var _props6 = this.props,\n            onDatesChange = _props6.onDatesChange,\n            reopenPickerOnClearDates = _props6.reopenPickerOnClearDates,\n            onFocusChange = _props6.onFocusChange;\n        onDatesChange({\n          startDate: null,\n          endDate: null\n        });\n\n        if (reopenPickerOnClearDates) {\n          onFocusChange(_constants.START_DATE);\n        }\n      }\n\n      return clearDates;\n    }()\n  }, {\n    key: 'render',\n    value: function () {\n      function render() {\n        var _props7 = this.props,\n            startDate = _props7.startDate,\n            startDateId = _props7.startDateId,\n            startDatePlaceholderText = _props7.startDatePlaceholderText,\n            isStartDateFocused = _props7.isStartDateFocused,\n            endDate = _props7.endDate,\n            endDateId = _props7.endDateId,\n            endDatePlaceholderText = _props7.endDatePlaceholderText,\n            isEndDateFocused = _props7.isEndDateFocused,\n            screenReaderMessage = _props7.screenReaderMessage,\n            showClearDates = _props7.showClearDates,\n            showCaret = _props7.showCaret,\n            showDefaultInputIcon = _props7.showDefaultInputIcon,\n            inputIconPosition = _props7.inputIconPosition,\n            customInputIcon = _props7.customInputIcon,\n            customArrowIcon = _props7.customArrowIcon,\n            customCloseIcon = _props7.customCloseIcon,\n            disabled = _props7.disabled,\n            required = _props7.required,\n            readOnly = _props7.readOnly,\n            openDirection = _props7.openDirection,\n            isFocused = _props7.isFocused,\n            phrases = _props7.phrases,\n            onKeyDownArrowDown = _props7.onKeyDownArrowDown,\n            onKeyDownQuestionMark = _props7.onKeyDownQuestionMark,\n            isRTL = _props7.isRTL,\n            noBorder = _props7.noBorder,\n            block = _props7.block,\n            small = _props7.small,\n            regular = _props7.regular,\n            verticalSpacing = _props7.verticalSpacing;\n        var startDateString = this.getDateString(startDate);\n        var endDateString = this.getDateString(endDate);\n        return _react2['default'].createElement(_DateRangePickerInput2['default'], {\n          startDate: startDateString,\n          startDateId: startDateId,\n          startDatePlaceholderText: startDatePlaceholderText,\n          isStartDateFocused: isStartDateFocused,\n          endDate: endDateString,\n          endDateId: endDateId,\n          endDatePlaceholderText: endDatePlaceholderText,\n          isEndDateFocused: isEndDateFocused,\n          isFocused: isFocused,\n          disabled: disabled,\n          required: required,\n          readOnly: readOnly,\n          openDirection: openDirection,\n          showCaret: showCaret,\n          showDefaultInputIcon: showDefaultInputIcon,\n          inputIconPosition: inputIconPosition,\n          customInputIcon: customInputIcon,\n          customArrowIcon: customArrowIcon,\n          customCloseIcon: customCloseIcon,\n          phrases: phrases,\n          onStartDateChange: this.onStartDateChange,\n          onStartDateFocus: this.onStartDateFocus,\n          onStartDateShiftTab: this.onClearFocus,\n          onEndDateChange: this.onEndDateChange,\n          onEndDateFocus: this.onEndDateFocus,\n          onEndDateTab: this.onClearFocus,\n          showClearDates: showClearDates,\n          onClearDates: this.clearDates,\n          screenReaderMessage: screenReaderMessage,\n          onKeyDownArrowDown: onKeyDownArrowDown,\n          onKeyDownQuestionMark: onKeyDownQuestionMark,\n          isRTL: isRTL,\n          noBorder: noBorder,\n          block: block,\n          small: small,\n          regular: regular,\n          verticalSpacing: verticalSpacing\n        });\n      }\n\n      return render;\n    }()\n  }]);\n\n  return DateRangePickerInputController;\n}(_baseClass2['default']);\n\nexports['default'] = DateRangePickerInputController;\nDateRangePickerInputController.propTypes = propTypes;\nDateRangePickerInputController.defaultProps = defaultProps;","map":null,"metadata":{},"sourceType":"script"}