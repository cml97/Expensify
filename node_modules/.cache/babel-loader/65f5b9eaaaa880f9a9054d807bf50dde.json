{"ast":null,"code":"import _objectSpread from \"/Users/mac/Desktop/ReactTutorial/Projects/redux-project/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/mac/Desktop/ReactTutorial/Projects/redux-project/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n// import React from 'react';\n// import ReactDOM from 'react-dom';\nimport './index.css'; //import App from './App';\n\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers } from 'redux';\n/*DEFAULT STATES*/\n\nvar defaultExpenses = [];\nvar defaultFilter = {\n  text: '',\n  sortBy: '',\n  startDate: undefined,\n  endDate: undefined\n};\nvar initialState = {\n  expenses: [{\n    id: 0,\n    description: 'January Rent',\n    note: 'This was the final payment of the rent',\n    amount: 1000,\n    createdAt: 0\n  }],\n  filters: {\n    text: 'rent',\n    sortBy: 'amount',\n    //Date or amount\n    startDate: undefined,\n    endDate: undefined\n  }\n};\n/*EXPENSE ACTIONS*/\n\nvar addExpense = function addExpense(expense) {\n  return {\n    type: 'ADD_EXPENSE',\n    payload: expense\n  };\n};\n\nvar removeExpense = function removeExpense(id) {\n  return {\n    type: 'REMOVE_EXPENSE',\n    payload: id\n  };\n};\n\nvar getExpenses = function getExpenses() {\n  return {\n    type: 'GET_EXPENSES'\n  };\n};\n\nvar getExpense = function getExpense(id) {\n  return {\n    type: 'GET_EXPENSE',\n    payload: id\n  };\n};\n\nvar editExpense = function editExpense(id, model) {\n  return {\n    type: 'EDIT_EXPENSE',\n    id: id,\n    model: model\n  };\n};\n/*FILTER ACTIONS*/\n\n\nvar sortByAmount = function sortByAmount() {\n  return {\n    type: 'SORT_BY_AMOUNT'\n  };\n};\n\nvar sortByDate = function sortByDate() {\n  return {\n    type: 'SORT_BY_DATE'\n  };\n};\n\nvar sortByText = function sortByText() {\n  return {\n    type: 'SORT_BY_TEXT'\n  };\n};\n\nvar setStartDate = function setStartDate(startDate) {\n  return {\n    type: 'SET_START_DATE',\n    startDate: startDate\n  };\n};\n\nvar setEndDate = function setEndDate(endDate) {\n  return {\n    type: 'SET_END_DATE',\n    endDate: endDate\n  };\n};\n\nvar getFilteredExpenses = function getFilteredExpenses(expenses, filter) {\n  if (expenses.length > 0) {\n    return expenses.filter(function (item) {\n      var startDateMatch = item.createdAt >= filter.startDate;\n      var endDateMatch = item.createdAt <= filter.endDate;\n      var textMatch = item.description.toLowerCase().includes(filter.text.toLowerCase());\n      return startDateMatch && endDateMatch && textMatch;\n    }).sort(function (a, b) {\n      if (filter.sortBy === 'date') {\n        return a.createdAt < b.createdAt ? 1 : -1;\n      } else if (filter.sortBy === 'amount') {\n        return a.amount < b.amount ? 1 : -1;\n      }\n    });\n  } else {\n    return [];\n  }\n};\n/*EXPENSE REDUCERS*/\n\n\nvar expensesReducer = function expensesReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultExpenses;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'ADD_EXPENSE':\n      return _toConsumableArray(state).concat([action.payload]);\n\n    case 'REMOVE_EXPENSE':\n      return state.filter(function (item) {\n        return item.id !== action.payload;\n      });\n\n    case 'EDIT_EXPENSE':\n      return state.map(function (item) {\n        if (item.id === action.id) {\n          return _objectSpread({}, item, action.model);\n        } else {\n          return item;\n        }\n      });\n\n    default:\n      return state;\n  }\n};\n\nvar filterReducer = function filterReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultFilter;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'SORT_BY_AMOUNT':\n      return _objectSpread({}, state, {\n        sortBy: 'amount'\n      });\n\n    case 'SORT_BY_DATE':\n      return _objectSpread({}, state, {\n        sortBy: 'date'\n      });\n\n    case 'SET_START_DATE':\n      return _objectSpread({}, state, {\n        startDate: action.startDate\n      });\n\n    case 'SET_END_DATE':\n      return _objectSpread({}, state, {\n        endDate: action.endDate\n      });\n\n    default:\n      return state;\n  }\n};\n/*COMBINE ALL THE REDUCERS*/\n\n\nvar rootReducer = combineReducers({\n  expensesReducer: expensesReducer,\n  filterReducer: filterReducer\n});\n/*STORE CREATE*/\n\nvar store = createStore(rootReducer);\nstore.subscribe(function () {\n  var state = store.getState();\n  var filteredExpenses = getFilteredExpenses(state.expensesReducer, state.filterReducer);\n  console.log(filteredExpenses);\n});\nstore.dispatch(addExpense({\n  id: 0,\n  description: 'İLK REDUX',\n  note: 'THIS IS MY FIRST REDUX',\n  amount: 500,\n  createdAt: 1500\n}));\nstore.dispatch(addExpense({\n  id: 1,\n  description: 'İLK REDUXXX',\n  note: 'THIS IS MY FIRST REDUXXXXXX',\n  amount: 500,\n  createdAt: 2500\n}));\nstore.dispatch(addExpense({\n  id: 2,\n  description: 'İLK REDUXXX',\n  note: 'THIS IS MY FIRST REDUXXXXXX',\n  amount: 500,\n  createdAt: 0\n}));\nstore.dispatch(editExpense(2, {\n  description: 'expense which is changed',\n  note: 'THIS IS MY FIRST REDUXXXXXX',\n  amount: 1500,\n  createdAt: 0\n}));\nstore.dispatch(setStartDate(1000));\nstore.dispatch(setEndDate(3000)); //ReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();","map":{"version":3,"sources":["/Users/mac/Desktop/ReactTutorial/Projects/redux-project/src/index.js"],"names":["serviceWorker","createStore","combineReducers","defaultExpenses","defaultFilter","text","sortBy","startDate","undefined","endDate","initialState","expenses","id","description","note","amount","createdAt","filters","addExpense","expense","type","payload","removeExpense","getExpenses","getExpense","editExpense","model","sortByAmount","sortByDate","sortByText","setStartDate","setEndDate","getFilteredExpenses","filter","length","item","startDateMatch","endDateMatch","textMatch","toLowerCase","includes","sort","a","b","expensesReducer","state","action","map","filterReducer","rootReducer","store","subscribe","getState","filteredExpenses","console","log","dispatch","unregister"],"mappings":"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","sourcesContent":["// import React from 'react';\n// import ReactDOM from 'react-dom';\nimport './index.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, combineReducers } from 'redux';\n\n\n/*DEFAULT STATES*/\nconst defaultExpenses = [];\nconst defaultFilter = {\n  text: '',\n  sortBy: '',\n  startDate: undefined,\n  endDate: undefined\n}\nconst initialState = {\n  expenses: [\n    {\n      id: 0,\n      description: 'January Rent',\n      note: 'This was the final payment of the rent',\n      amount: 1000,\n      createdAt: 0\n    }\n  ],\n  filters: {\n    text: 'rent',\n    sortBy: 'amount', //Date or amount\n    startDate: undefined,\n    endDate: undefined\n  }\n};\n\n/*EXPENSE ACTIONS*/\nconst addExpense = (expense) => {\n  return {\n    type: 'ADD_EXPENSE',\n    payload: expense\n  }\n};\n\nconst removeExpense = (id) => {\n  return {\n    type: 'REMOVE_EXPENSE',\n    payload: id\n  }\n};\n\nconst getExpenses = () => {\n  return {\n    type: 'GET_EXPENSES'\n  }\n}\n\nconst getExpense = (id) => {\n  return {\n    type: 'GET_EXPENSE',\n    payload: id\n  }\n};\n\n\nconst editExpense = (id, model) => {\n  return {\n    type: 'EDIT_EXPENSE',\n    id,\n    model\n  }\n}\n\n/*FILTER ACTIONS*/\nconst sortByAmount = () => {\n  return {\n    type: 'SORT_BY_AMOUNT'\n  }\n}\n\nconst sortByDate = () => {\n  return {\n    type: 'SORT_BY_DATE'\n  }\n}\nconst sortByText = () => {\n  return {\n    type: 'SORT_BY_TEXT'\n  }\n}\nconst setStartDate = (startDate) => {\n  return {\n    type: 'SET_START_DATE',\n    startDate\n  }\n}\nconst setEndDate = (endDate) => {\n  return {\n    type: 'SET_END_DATE',\n    endDate\n  }\n}\n\nconst getFilteredExpenses = (expenses, filter) => {\n  if (expenses.length > 0) {\n    return expenses.filter((item) => {\n      let startDateMatch = item.createdAt >= filter.startDate;\n      let endDateMatch = item.createdAt <= filter.endDate;\n      let textMatch = item.description.toLowerCase().includes(filter.text.toLowerCase());\n\n      return startDateMatch && endDateMatch && textMatch;\n\n    }).sort((a, b) => {\n      if (filter.sortBy === 'date') {\n        return a.createdAt < b.createdAt ? 1 : -1;\n      }\n      else if (filter.sortBy === 'amount') {\n        return a.amount < b.amount ? 1 : -1\n      }\n    });\n  }\n  else {\n    return [];\n  }\n}\n\n/*EXPENSE REDUCERS*/\nconst expensesReducer = (state = defaultExpenses, action) => {\n    switch (action.type) {\n      case 'ADD_EXPENSE':\n        return [\n          ...state,\n          action.payload\n        ];\n      case 'REMOVE_EXPENSE':\n        return state.filter(item => item.id !== action.payload);\n      case 'EDIT_EXPENSE':\n        return state.map((item) => {\n          if (item.id === action.id) {\n            return { ...item, ...action.model }\n          }\n          else {\n            return item;\n          }\n        })\n      default:\n        return state;\n    }\n};\n\nconst filterReducer = (state = defaultFilter, action) => {\n  switch (action.type) {\n    case 'SORT_BY_AMOUNT':\n      return {\n        ...state,\n        sortBy: 'amount'\n      }\n    case 'SORT_BY_DATE':\n      return {\n        ...state,\n        sortBy: 'date'\n      }\n    case 'SET_START_DATE':\n      return {\n        ...state,\n        startDate: action.startDate\n      }\n    case 'SET_END_DATE':\n      return {\n        ...state,\n        endDate: action.endDate\n      }\n    default:\n      return state;\n  }\n}\n\n/*COMBINE ALL THE REDUCERS*/\nconst rootReducer = combineReducers({\n  expensesReducer,\n  filterReducer\n});\n\n/*STORE CREATE*/\nconst store = createStore(rootReducer);\nstore.subscribe(() => {\n  const state = store.getState();\n  const filteredExpenses = getFilteredExpenses(state.expensesReducer, state.filterReducer);\n\n  console.log(filteredExpenses);\n});\n\nstore.dispatch(addExpense({ id: 0, description: 'İLK REDUX', note: 'THIS IS MY FIRST REDUX', amount: 500, createdAt: 1500}));\nstore.dispatch(addExpense({ id: 1, description: 'İLK REDUXXX', note: 'THIS IS MY FIRST REDUXXXXXX', amount: 500, createdAt: 2500}));\nstore.dispatch(addExpense({ id: 2, description: 'İLK REDUXXX', note: 'THIS IS MY FIRST REDUXXXXXX', amount: 500, createdAt: 0}));\nstore.dispatch(editExpense(2, { description: 'expense which is changed', note: 'THIS IS MY FIRST REDUXXXXXX', amount: 1500, createdAt: 0}));\nstore.dispatch(setStartDate(1000));\nstore.dispatch(setEndDate(3000));\n\n\n//ReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"]},"metadata":{},"sourceType":"module"}