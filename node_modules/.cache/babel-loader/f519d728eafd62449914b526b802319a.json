{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PureDayPicker = exports.defaultProps = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _object = require('object.assign');\n\nvar _object2 = _interopRequireDefault(_object);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _airbnbPropTypes = require('airbnb-prop-types');\n\nvar _reactWithStyles = require('react-with-styles');\n\nvar _moment = require('moment');\n\nvar _moment2 = _interopRequireDefault(_moment);\n\nvar _throttle = require('lodash/throttle');\n\nvar _throttle2 = _interopRequireDefault(_throttle);\n\nvar _isTouchDevice = require('is-touch-device');\n\nvar _isTouchDevice2 = _interopRequireDefault(_isTouchDevice);\n\nvar _reactOutsideClickHandler = require('react-outside-click-handler');\n\nvar _reactOutsideClickHandler2 = _interopRequireDefault(_reactOutsideClickHandler);\n\nvar _defaultPhrases = require('../defaultPhrases');\n\nvar _getPhrasePropTypes = require('../utils/getPhrasePropTypes');\n\nvar _getPhrasePropTypes2 = _interopRequireDefault(_getPhrasePropTypes);\n\nvar _CalendarMonthGrid = require('./CalendarMonthGrid');\n\nvar _CalendarMonthGrid2 = _interopRequireDefault(_CalendarMonthGrid);\n\nvar _DayPickerNavigation = require('./DayPickerNavigation');\n\nvar _DayPickerNavigation2 = _interopRequireDefault(_DayPickerNavigation);\n\nvar _DayPickerKeyboardShortcuts = require('./DayPickerKeyboardShortcuts');\n\nvar _DayPickerKeyboardShortcuts2 = _interopRequireDefault(_DayPickerKeyboardShortcuts);\n\nvar _getNumberOfCalendarMonthWeeks = require('../utils/getNumberOfCalendarMonthWeeks');\n\nvar _getNumberOfCalendarMonthWeeks2 = _interopRequireDefault(_getNumberOfCalendarMonthWeeks);\n\nvar _getCalendarMonthWidth = require('../utils/getCalendarMonthWidth');\n\nvar _getCalendarMonthWidth2 = _interopRequireDefault(_getCalendarMonthWidth);\n\nvar _calculateDimension = require('../utils/calculateDimension');\n\nvar _calculateDimension2 = _interopRequireDefault(_calculateDimension);\n\nvar _getActiveElement = require('../utils/getActiveElement');\n\nvar _getActiveElement2 = _interopRequireDefault(_getActiveElement);\n\nvar _isDayVisible = require('../utils/isDayVisible');\n\nvar _isDayVisible2 = _interopRequireDefault(_isDayVisible);\n\nvar _ModifiersShape = require('../shapes/ModifiersShape');\n\nvar _ModifiersShape2 = _interopRequireDefault(_ModifiersShape);\n\nvar _ScrollableOrientationShape = require('../shapes/ScrollableOrientationShape');\n\nvar _ScrollableOrientationShape2 = _interopRequireDefault(_ScrollableOrientationShape);\n\nvar _DayOfWeekShape = require('../shapes/DayOfWeekShape');\n\nvar _DayOfWeekShape2 = _interopRequireDefault(_DayOfWeekShape);\n\nvar _CalendarInfoPositionShape = require('../shapes/CalendarInfoPositionShape');\n\nvar _CalendarInfoPositionShape2 = _interopRequireDefault(_CalendarInfoPositionShape);\n\nvar _baseClass = require('../utils/baseClass');\n\nvar _baseClass2 = _interopRequireDefault(_baseClass);\n\nvar _constants = require('../constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar MONTH_PADDING = 23;\nvar PREV_TRANSITION = 'prev';\nvar NEXT_TRANSITION = 'next';\nvar MONTH_SELECTION_TRANSITION = 'month_selection';\nvar YEAR_SELECTION_TRANSITION = 'year_selection';\nvar propTypes = (0, _airbnbPropTypes.forbidExtraProps)((0, _object2['default'])({}, _reactWithStyles.withStylesPropTypes, {\n  // calendar presentation props\n  enableOutsideDays: _propTypes2['default'].bool,\n  numberOfMonths: _propTypes2['default'].number,\n  orientation: _ScrollableOrientationShape2['default'],\n  withPortal: _propTypes2['default'].bool,\n  onOutsideClick: _propTypes2['default'].func,\n  hidden: _propTypes2['default'].bool,\n  initialVisibleMonth: _propTypes2['default'].func,\n  firstDayOfWeek: _DayOfWeekShape2['default'],\n  renderCalendarInfo: _propTypes2['default'].func,\n  calendarInfoPosition: _CalendarInfoPositionShape2['default'],\n  hideKeyboardShortcutsPanel: _propTypes2['default'].bool,\n  daySize: _airbnbPropTypes.nonNegativeInteger,\n  isRTL: _propTypes2['default'].bool,\n  verticalHeight: _airbnbPropTypes.nonNegativeInteger,\n  noBorder: _propTypes2['default'].bool,\n  transitionDuration: _airbnbPropTypes.nonNegativeInteger,\n  verticalBorderSpacing: _airbnbPropTypes.nonNegativeInteger,\n  horizontalMonthPadding: _airbnbPropTypes.nonNegativeInteger,\n  // navigation props\n  navPrev: _propTypes2['default'].node,\n  navNext: _propTypes2['default'].node,\n  noNavButtons: _propTypes2['default'].bool,\n  onPrevMonthClick: _propTypes2['default'].func,\n  onNextMonthClick: _propTypes2['default'].func,\n  onMonthChange: _propTypes2['default'].func,\n  onYearChange: _propTypes2['default'].func,\n  onMultiplyScrollableMonths: _propTypes2['default'].func,\n  // VERTICAL_SCROLLABLE daypickers only\n  // month props\n  renderMonthText: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes2['default'].func, 'renderMonthText', 'renderMonthElement'),\n  renderMonthElement: (0, _airbnbPropTypes.mutuallyExclusiveProps)(_propTypes2['default'].func, 'renderMonthText', 'renderMonthElement'),\n  // day props\n  modifiers: _propTypes2['default'].objectOf(_propTypes2['default'].objectOf(_ModifiersShape2['default'])),\n  renderCalendarDay: _propTypes2['default'].func,\n  renderDayContents: _propTypes2['default'].func,\n  onDayClick: _propTypes2['default'].func,\n  onDayMouseEnter: _propTypes2['default'].func,\n  onDayMouseLeave: _propTypes2['default'].func,\n  // accessibility props\n  isFocused: _propTypes2['default'].bool,\n  getFirstFocusableDay: _propTypes2['default'].func,\n  onBlur: _propTypes2['default'].func,\n  showKeyboardShortcuts: _propTypes2['default'].bool,\n  // internationalization\n  monthFormat: _propTypes2['default'].string,\n  weekDayFormat: _propTypes2['default'].string,\n  phrases: _propTypes2['default'].shape((0, _getPhrasePropTypes2['default'])(_defaultPhrases.DayPickerPhrases)),\n  dayAriaLabelFormat: _propTypes2['default'].string\n}));\nvar defaultProps = exports.defaultProps = {\n  // calendar presentation props\n  enableOutsideDays: false,\n  numberOfMonths: 2,\n  orientation: _constants.HORIZONTAL_ORIENTATION,\n  withPortal: false,\n  onOutsideClick: function () {\n    function onOutsideClick() {}\n\n    return onOutsideClick;\n  }(),\n  hidden: false,\n  initialVisibleMonth: function () {\n    function initialVisibleMonth() {\n      return (0, _moment2['default'])();\n    }\n\n    return initialVisibleMonth;\n  }(),\n  firstDayOfWeek: null,\n  renderCalendarInfo: null,\n  calendarInfoPosition: _constants.INFO_POSITION_BOTTOM,\n  hideKeyboardShortcutsPanel: false,\n  daySize: _constants.DAY_SIZE,\n  isRTL: false,\n  verticalHeight: null,\n  noBorder: false,\n  transitionDuration: undefined,\n  verticalBorderSpacing: undefined,\n  horizontalMonthPadding: 13,\n  // navigation props\n  navPrev: null,\n  navNext: null,\n  noNavButtons: false,\n  onPrevMonthClick: function () {\n    function onPrevMonthClick() {}\n\n    return onPrevMonthClick;\n  }(),\n  onNextMonthClick: function () {\n    function onNextMonthClick() {}\n\n    return onNextMonthClick;\n  }(),\n  onMonthChange: function () {\n    function onMonthChange() {}\n\n    return onMonthChange;\n  }(),\n  onYearChange: function () {\n    function onYearChange() {}\n\n    return onYearChange;\n  }(),\n  onMultiplyScrollableMonths: function () {\n    function onMultiplyScrollableMonths() {}\n\n    return onMultiplyScrollableMonths;\n  }(),\n  // month props\n  renderMonthText: null,\n  renderMonthElement: null,\n  // day props\n  modifiers: {},\n  renderCalendarDay: undefined,\n  renderDayContents: null,\n  onDayClick: function () {\n    function onDayClick() {}\n\n    return onDayClick;\n  }(),\n  onDayMouseEnter: function () {\n    function onDayMouseEnter() {}\n\n    return onDayMouseEnter;\n  }(),\n  onDayMouseLeave: function () {\n    function onDayMouseLeave() {}\n\n    return onDayMouseLeave;\n  }(),\n  // accessibility props\n  isFocused: false,\n  getFirstFocusableDay: null,\n  onBlur: function () {\n    function onBlur() {}\n\n    return onBlur;\n  }(),\n  showKeyboardShortcuts: false,\n  // internationalization\n  monthFormat: 'MMMM YYYY',\n  weekDayFormat: 'dd',\n  phrases: _defaultPhrases.DayPickerPhrases,\n  dayAriaLabelFormat: undefined\n};\n/** @extends React.Component */\n\nvar DayPicker = function (_BaseClass) {\n  _inherits(DayPicker, _BaseClass);\n\n  function DayPicker(props) {\n    _classCallCheck(this, DayPicker);\n\n    var _this = _possibleConstructorReturn(this, (DayPicker.__proto__ || Object.getPrototypeOf(DayPicker)).call(this, props));\n\n    var currentMonth = props.hidden ? (0, _moment2['default'])() : props.initialVisibleMonth();\n    var focusedDate = currentMonth.clone().startOf('month');\n\n    if (props.getFirstFocusableDay) {\n      focusedDate = props.getFirstFocusableDay(currentMonth);\n    }\n\n    var horizontalMonthPadding = props.horizontalMonthPadding;\n    var translationValue = props.isRTL && _this.isHorizontal() ? -(0, _getCalendarMonthWidth2['default'])(props.daySize, horizontalMonthPadding) : 0;\n    _this.hasSetInitialVisibleMonth = !props.hidden;\n    _this.state = {\n      currentMonth: currentMonth,\n      monthTransition: null,\n      translationValue: translationValue,\n      scrollableMonthMultiple: 1,\n      calendarMonthWidth: (0, _getCalendarMonthWidth2['default'])(props.daySize, horizontalMonthPadding),\n      focusedDate: !props.hidden || props.isFocused ? focusedDate : null,\n      nextFocusedDate: null,\n      showKeyboardShortcuts: props.showKeyboardShortcuts,\n      onKeyboardShortcutsPanelClose: function () {\n        function onKeyboardShortcutsPanelClose() {}\n\n        return onKeyboardShortcutsPanelClose;\n      }(),\n      isTouchDevice: (0, _isTouchDevice2['default'])(),\n      withMouseInteractions: true,\n      calendarInfoWidth: 0,\n      monthTitleHeight: null,\n      hasSetHeight: false\n    };\n\n    _this.setCalendarMonthWeeks(currentMonth);\n\n    _this.calendarMonthGridHeight = 0;\n    _this.setCalendarInfoWidthTimeout = null;\n    _this.onKeyDown = _this.onKeyDown.bind(_this);\n    _this.throttledKeyDown = (0, _throttle2['default'])(_this.onFinalKeyDown, 200, {\n      trailing: false\n    });\n    _this.onPrevMonthClick = _this.onPrevMonthClick.bind(_this);\n    _this.onPrevMonthTransition = _this.onPrevMonthTransition.bind(_this);\n    _this.onNextMonthClick = _this.onNextMonthClick.bind(_this);\n    _this.onNextMonthTransition = _this.onNextMonthTransition.bind(_this);\n    _this.onMonthChange = _this.onMonthChange.bind(_this);\n    _this.onYearChange = _this.onYearChange.bind(_this);\n    _this.multiplyScrollableMonths = _this.multiplyScrollableMonths.bind(_this);\n    _this.updateStateAfterMonthTransition = _this.updateStateAfterMonthTransition.bind(_this);\n    _this.openKeyboardShortcutsPanel = _this.openKeyboardShortcutsPanel.bind(_this);\n    _this.closeKeyboardShortcutsPanel = _this.closeKeyboardShortcutsPanel.bind(_this);\n    _this.setCalendarInfoRef = _this.setCalendarInfoRef.bind(_this);\n    _this.setContainerRef = _this.setContainerRef.bind(_this);\n    _this.setTransitionContainerRef = _this.setTransitionContainerRef.bind(_this);\n    _this.setMonthTitleHeight = _this.setMonthTitleHeight.bind(_this);\n    return _this;\n  }\n\n  _createClass(DayPicker, [{\n    key: 'componentDidMount',\n    value: function () {\n      function componentDidMount() {\n        var currentMonth = this.state.currentMonth;\n\n        if (this.calendarInfo) {\n          this.setState({\n            isTouchDevice: (0, _isTouchDevice2['default'])(),\n            calendarInfoWidth: (0, _calculateDimension2['default'])(this.calendarInfo, 'width', true, true)\n          });\n        } else {\n          this.setState({\n            isTouchDevice: (0, _isTouchDevice2['default'])()\n          });\n        }\n\n        this.setCalendarMonthWeeks(currentMonth);\n      }\n\n      return componentDidMount;\n    }()\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function () {\n      function componentWillReceiveProps(nextProps) {\n        var hidden = nextProps.hidden,\n            isFocused = nextProps.isFocused,\n            showKeyboardShortcuts = nextProps.showKeyboardShortcuts,\n            onBlur = nextProps.onBlur,\n            renderMonthText = nextProps.renderMonthText,\n            horizontalMonthPadding = nextProps.horizontalMonthPadding;\n        var currentMonth = this.state.currentMonth;\n\n        if (!hidden) {\n          if (!this.hasSetInitialVisibleMonth) {\n            this.hasSetInitialVisibleMonth = true;\n            this.setState({\n              currentMonth: nextProps.initialVisibleMonth()\n            });\n          }\n        }\n\n        var _props = this.props,\n            daySize = _props.daySize,\n            prevIsFocused = _props.isFocused,\n            prevRenderMonthText = _props.renderMonthText;\n\n        if (nextProps.daySize !== daySize) {\n          this.setState({\n            calendarMonthWidth: (0, _getCalendarMonthWidth2['default'])(nextProps.daySize, horizontalMonthPadding)\n          });\n        }\n\n        if (isFocused !== prevIsFocused) {\n          if (isFocused) {\n            var focusedDate = this.getFocusedDay(currentMonth);\n            var onKeyboardShortcutsPanelClose = this.state.onKeyboardShortcutsPanelClose;\n\n            if (nextProps.showKeyboardShortcuts) {\n              // the ? shortcut came from the input and we should return input there once it is close\n              onKeyboardShortcutsPanelClose = onBlur;\n            }\n\n            this.setState({\n              showKeyboardShortcuts: showKeyboardShortcuts,\n              onKeyboardShortcutsPanelClose: onKeyboardShortcutsPanelClose,\n              focusedDate: focusedDate,\n              withMouseInteractions: false\n            });\n          } else {\n            this.setState({\n              focusedDate: null\n            });\n          }\n        }\n\n        if (renderMonthText !== prevRenderMonthText) {\n          this.setState({\n            monthTitleHeight: null\n          });\n        }\n      }\n\n      return componentWillReceiveProps;\n    }()\n  }, {\n    key: 'componentWillUpdate',\n    value: function () {\n      function componentWillUpdate() {\n        var _this2 = this;\n\n        var transitionDuration = this.props.transitionDuration; // Calculating the dimensions trigger a DOM repaint which\n        // breaks the CSS transition.\n        // The setTimeout will wait until the transition ends.\n\n        if (this.calendarInfo) {\n          this.setCalendarInfoWidthTimeout = setTimeout(function () {\n            var calendarInfoWidth = _this2.state.calendarInfoWidth;\n            var calendarInfoPanelWidth = (0, _calculateDimension2['default'])(_this2.calendarInfo, 'width', true, true);\n\n            if (calendarInfoWidth !== calendarInfoPanelWidth) {\n              _this2.setState({\n                calendarInfoWidth: calendarInfoPanelWidth\n              });\n            }\n          }, transitionDuration);\n        }\n      }\n\n      return componentWillUpdate;\n    }()\n  }, {\n    key: 'componentDidUpdate',\n    value: function () {\n      function componentDidUpdate(prevProps) {\n        var _props2 = this.props,\n            orientation = _props2.orientation,\n            daySize = _props2.daySize,\n            isFocused = _props2.isFocused,\n            numberOfMonths = _props2.numberOfMonths;\n        var _state = this.state,\n            focusedDate = _state.focusedDate,\n            monthTitleHeight = _state.monthTitleHeight;\n\n        if (this.isHorizontal() && (orientation !== prevProps.orientation || daySize !== prevProps.daySize)) {\n          var visibleCalendarWeeks = this.calendarMonthWeeks.slice(1, numberOfMonths + 1);\n          var calendarMonthWeeksHeight = Math.max.apply(Math, [0].concat(_toConsumableArray(visibleCalendarWeeks))) * (daySize - 1);\n          var newMonthHeight = monthTitleHeight + calendarMonthWeeksHeight + 1;\n          this.adjustDayPickerHeight(newMonthHeight);\n        }\n\n        if (!prevProps.isFocused && isFocused && !focusedDate) {\n          this.container.focus();\n        }\n      }\n\n      return componentDidUpdate;\n    }()\n  }, {\n    key: 'componentWillUnmount',\n    value: function () {\n      function componentWillUnmount() {\n        clearTimeout(this.setCalendarInfoWidthTimeout);\n      }\n\n      return componentWillUnmount;\n    }()\n  }, {\n    key: 'onKeyDown',\n    value: function () {\n      function onKeyDown(e) {\n        e.stopPropagation();\n\n        if (!_constants.MODIFIER_KEY_NAMES.has(e.key)) {\n          this.throttledKeyDown(e);\n        }\n      }\n\n      return onKeyDown;\n    }()\n  }, {\n    key: 'onFinalKeyDown',\n    value: function () {\n      function onFinalKeyDown(e) {\n        this.setState({\n          withMouseInteractions: false\n        });\n        var _props3 = this.props,\n            onBlur = _props3.onBlur,\n            isRTL = _props3.isRTL;\n        var _state2 = this.state,\n            focusedDate = _state2.focusedDate,\n            showKeyboardShortcuts = _state2.showKeyboardShortcuts;\n        if (!focusedDate) return;\n        var newFocusedDate = focusedDate.clone();\n        var didTransitionMonth = false; // focus might be anywhere when the keyboard shortcuts panel is opened so we want to\n        // return it to wherever it was before when the panel was opened\n\n        var activeElement = (0, _getActiveElement2['default'])();\n\n        var onKeyboardShortcutsPanelClose = function () {\n          function onKeyboardShortcutsPanelClose() {\n            if (activeElement) activeElement.focus();\n          }\n\n          return onKeyboardShortcutsPanelClose;\n        }();\n\n        switch (e.key) {\n          case 'ArrowUp':\n            e.preventDefault();\n            newFocusedDate.subtract(1, 'week');\n            didTransitionMonth = this.maybeTransitionPrevMonth(newFocusedDate);\n            break;\n\n          case 'ArrowLeft':\n            e.preventDefault();\n\n            if (isRTL) {\n              newFocusedDate.add(1, 'day');\n            } else {\n              newFocusedDate.subtract(1, 'day');\n            }\n\n            didTransitionMonth = this.maybeTransitionPrevMonth(newFocusedDate);\n            break;\n\n          case 'Home':\n            e.preventDefault();\n            newFocusedDate.startOf('week');\n            didTransitionMonth = this.maybeTransitionPrevMonth(newFocusedDate);\n            break;\n\n          case 'PageUp':\n            e.preventDefault();\n            newFocusedDate.subtract(1, 'month');\n            didTransitionMonth = this.maybeTransitionPrevMonth(newFocusedDate);\n            break;\n\n          case 'ArrowDown':\n            e.preventDefault();\n            newFocusedDate.add(1, 'week');\n            didTransitionMonth = this.maybeTransitionNextMonth(newFocusedDate);\n            break;\n\n          case 'ArrowRight':\n            e.preventDefault();\n\n            if (isRTL) {\n              newFocusedDate.subtract(1, 'day');\n            } else {\n              newFocusedDate.add(1, 'day');\n            }\n\n            didTransitionMonth = this.maybeTransitionNextMonth(newFocusedDate);\n            break;\n\n          case 'End':\n            e.preventDefault();\n            newFocusedDate.endOf('week');\n            didTransitionMonth = this.maybeTransitionNextMonth(newFocusedDate);\n            break;\n\n          case 'PageDown':\n            e.preventDefault();\n            newFocusedDate.add(1, 'month');\n            didTransitionMonth = this.maybeTransitionNextMonth(newFocusedDate);\n            break;\n\n          case '?':\n            this.openKeyboardShortcutsPanel(onKeyboardShortcutsPanelClose);\n            break;\n\n          case 'Escape':\n            if (showKeyboardShortcuts) {\n              this.closeKeyboardShortcutsPanel();\n            } else {\n              onBlur();\n            }\n\n            break;\n\n          default:\n            break;\n        } // If there was a month transition, do not update the focused date until the transition has\n        // completed. Otherwise, attempting to focus on a DOM node may interrupt the CSS animation. If\n        // didTransitionMonth is true, the focusedDate gets updated in #updateStateAfterMonthTransition\n\n\n        if (!didTransitionMonth) {\n          this.setState({\n            focusedDate: newFocusedDate\n          });\n        }\n      }\n\n      return onFinalKeyDown;\n    }()\n  }, {\n    key: 'onPrevMonthClick',\n    value: function () {\n      function onPrevMonthClick(e) {\n        if (e) e.preventDefault();\n        this.onPrevMonthTransition();\n      }\n\n      return onPrevMonthClick;\n    }()\n  }, {\n    key: 'onPrevMonthTransition',\n    value: function () {\n      function onPrevMonthTransition(nextFocusedDate) {\n        var _props4 = this.props,\n            daySize = _props4.daySize,\n            isRTL = _props4.isRTL,\n            numberOfMonths = _props4.numberOfMonths;\n        var _state3 = this.state,\n            calendarMonthWidth = _state3.calendarMonthWidth,\n            monthTitleHeight = _state3.monthTitleHeight;\n        var translationValue = void 0;\n\n        if (this.isVertical()) {\n          var calendarMonthWeeksHeight = this.calendarMonthWeeks[0] * (daySize - 1);\n          translationValue = monthTitleHeight + calendarMonthWeeksHeight + 1;\n        } else if (this.isHorizontal()) {\n          translationValue = calendarMonthWidth;\n\n          if (isRTL) {\n            translationValue = -2 * calendarMonthWidth;\n          }\n\n          var visibleCalendarWeeks = this.calendarMonthWeeks.slice(0, numberOfMonths);\n\n          var _calendarMonthWeeksHeight = Math.max.apply(Math, [0].concat(_toConsumableArray(visibleCalendarWeeks))) * (daySize - 1);\n\n          var newMonthHeight = monthTitleHeight + _calendarMonthWeeksHeight + 1;\n          this.adjustDayPickerHeight(newMonthHeight);\n        }\n\n        this.setState({\n          monthTransition: PREV_TRANSITION,\n          translationValue: translationValue,\n          focusedDate: null,\n          nextFocusedDate: nextFocusedDate\n        });\n      }\n\n      return onPrevMonthTransition;\n    }()\n  }, {\n    key: 'onMonthChange',\n    value: function () {\n      function onMonthChange(currentMonth) {\n        this.setCalendarMonthWeeks(currentMonth);\n        this.calculateAndSetDayPickerHeight(); // Translation value is a hack to force an invisible transition that\n        // properly rerenders the CalendarMonthGrid\n\n        this.setState({\n          monthTransition: MONTH_SELECTION_TRANSITION,\n          translationValue: 0.00001,\n          focusedDate: null,\n          nextFocusedDate: currentMonth,\n          currentMonth: currentMonth\n        });\n      }\n\n      return onMonthChange;\n    }()\n  }, {\n    key: 'onYearChange',\n    value: function () {\n      function onYearChange(currentMonth) {\n        this.setCalendarMonthWeeks(currentMonth);\n        this.calculateAndSetDayPickerHeight(); // Translation value is a hack to force an invisible transition that\n        // properly rerenders the CalendarMonthGrid\n\n        this.setState({\n          monthTransition: YEAR_SELECTION_TRANSITION,\n          translationValue: 0.0001,\n          focusedDate: null,\n          nextFocusedDate: currentMonth,\n          currentMonth: currentMonth\n        });\n      }\n\n      return onYearChange;\n    }()\n  }, {\n    key: 'onNextMonthClick',\n    value: function () {\n      function onNextMonthClick(e) {\n        if (e) e.preventDefault();\n        this.onNextMonthTransition();\n      }\n\n      return onNextMonthClick;\n    }()\n  }, {\n    key: 'onNextMonthTransition',\n    value: function () {\n      function onNextMonthTransition(nextFocusedDate) {\n        var _props5 = this.props,\n            isRTL = _props5.isRTL,\n            numberOfMonths = _props5.numberOfMonths,\n            daySize = _props5.daySize;\n        var _state4 = this.state,\n            calendarMonthWidth = _state4.calendarMonthWidth,\n            monthTitleHeight = _state4.monthTitleHeight;\n        var translationValue = void 0;\n\n        if (this.isVertical()) {\n          var firstVisibleMonthWeeks = this.calendarMonthWeeks[1];\n          var calendarMonthWeeksHeight = firstVisibleMonthWeeks * (daySize - 1);\n          translationValue = -(monthTitleHeight + calendarMonthWeeksHeight + 1);\n        }\n\n        if (this.isHorizontal()) {\n          translationValue = -calendarMonthWidth;\n\n          if (isRTL) {\n            translationValue = 0;\n          }\n\n          var visibleCalendarWeeks = this.calendarMonthWeeks.slice(2, numberOfMonths + 2);\n\n          var _calendarMonthWeeksHeight2 = Math.max.apply(Math, [0].concat(_toConsumableArray(visibleCalendarWeeks))) * (daySize - 1);\n\n          var newMonthHeight = monthTitleHeight + _calendarMonthWeeksHeight2 + 1;\n          this.adjustDayPickerHeight(newMonthHeight);\n        }\n\n        this.setState({\n          monthTransition: NEXT_TRANSITION,\n          translationValue: translationValue,\n          focusedDate: null,\n          nextFocusedDate: nextFocusedDate\n        });\n      }\n\n      return onNextMonthTransition;\n    }()\n  }, {\n    key: 'getFirstDayOfWeek',\n    value: function () {\n      function getFirstDayOfWeek() {\n        var firstDayOfWeek = this.props.firstDayOfWeek;\n\n        if (firstDayOfWeek == null) {\n          return _moment2['default'].localeData().firstDayOfWeek();\n        }\n\n        return firstDayOfWeek;\n      }\n\n      return getFirstDayOfWeek;\n    }()\n  }, {\n    key: 'getFirstVisibleIndex',\n    value: function () {\n      function getFirstVisibleIndex() {\n        var orientation = this.props.orientation;\n        var monthTransition = this.state.monthTransition;\n        if (orientation === _constants.VERTICAL_SCROLLABLE) return 0;\n        var firstVisibleMonthIndex = 1;\n\n        if (monthTransition === PREV_TRANSITION) {\n          firstVisibleMonthIndex -= 1;\n        } else if (monthTransition === NEXT_TRANSITION) {\n          firstVisibleMonthIndex += 1;\n        }\n\n        return firstVisibleMonthIndex;\n      }\n\n      return getFirstVisibleIndex;\n    }()\n  }, {\n    key: 'getFocusedDay',\n    value: function () {\n      function getFocusedDay(newMonth) {\n        var _props6 = this.props,\n            getFirstFocusableDay = _props6.getFirstFocusableDay,\n            numberOfMonths = _props6.numberOfMonths;\n        var focusedDate = void 0;\n\n        if (getFirstFocusableDay) {\n          focusedDate = getFirstFocusableDay(newMonth);\n        }\n\n        if (newMonth && (!focusedDate || !(0, _isDayVisible2['default'])(focusedDate, newMonth, numberOfMonths))) {\n          focusedDate = newMonth.clone().startOf('month');\n        }\n\n        return focusedDate;\n      }\n\n      return getFocusedDay;\n    }()\n  }, {\n    key: 'setMonthTitleHeight',\n    value: function () {\n      function setMonthTitleHeight(monthTitleHeight) {\n        var _this3 = this;\n\n        this.setState({\n          monthTitleHeight: monthTitleHeight\n        }, function () {\n          _this3.calculateAndSetDayPickerHeight();\n        });\n      }\n\n      return setMonthTitleHeight;\n    }()\n  }, {\n    key: 'setCalendarMonthWeeks',\n    value: function () {\n      function setCalendarMonthWeeks(currentMonth) {\n        var numberOfMonths = this.props.numberOfMonths;\n        this.calendarMonthWeeks = [];\n        var month = currentMonth.clone().subtract(1, 'months');\n        var firstDayOfWeek = this.getFirstDayOfWeek();\n\n        for (var i = 0; i < numberOfMonths + 2; i += 1) {\n          var numberOfWeeks = (0, _getNumberOfCalendarMonthWeeks2['default'])(month, firstDayOfWeek);\n          this.calendarMonthWeeks.push(numberOfWeeks);\n          month = month.add(1, 'months');\n        }\n      }\n\n      return setCalendarMonthWeeks;\n    }()\n  }, {\n    key: 'setContainerRef',\n    value: function () {\n      function setContainerRef(ref) {\n        this.container = ref;\n      }\n\n      return setContainerRef;\n    }()\n  }, {\n    key: 'setCalendarInfoRef',\n    value: function () {\n      function setCalendarInfoRef(ref) {\n        this.calendarInfo = ref;\n      }\n\n      return setCalendarInfoRef;\n    }()\n  }, {\n    key: 'setTransitionContainerRef',\n    value: function () {\n      function setTransitionContainerRef(ref) {\n        this.transitionContainer = ref;\n      }\n\n      return setTransitionContainerRef;\n    }()\n  }, {\n    key: 'maybeTransitionNextMonth',\n    value: function () {\n      function maybeTransitionNextMonth(newFocusedDate) {\n        var numberOfMonths = this.props.numberOfMonths;\n        var _state5 = this.state,\n            currentMonth = _state5.currentMonth,\n            focusedDate = _state5.focusedDate;\n        var newFocusedDateMonth = newFocusedDate.month();\n        var focusedDateMonth = focusedDate.month();\n        var isNewFocusedDateVisible = (0, _isDayVisible2['default'])(newFocusedDate, currentMonth, numberOfMonths);\n\n        if (newFocusedDateMonth !== focusedDateMonth && !isNewFocusedDateVisible) {\n          this.onNextMonthTransition(newFocusedDate);\n          return true;\n        }\n\n        return false;\n      }\n\n      return maybeTransitionNextMonth;\n    }()\n  }, {\n    key: 'maybeTransitionPrevMonth',\n    value: function () {\n      function maybeTransitionPrevMonth(newFocusedDate) {\n        var numberOfMonths = this.props.numberOfMonths;\n        var _state6 = this.state,\n            currentMonth = _state6.currentMonth,\n            focusedDate = _state6.focusedDate;\n        var newFocusedDateMonth = newFocusedDate.month();\n        var focusedDateMonth = focusedDate.month();\n        var isNewFocusedDateVisible = (0, _isDayVisible2['default'])(newFocusedDate, currentMonth, numberOfMonths);\n\n        if (newFocusedDateMonth !== focusedDateMonth && !isNewFocusedDateVisible) {\n          this.onPrevMonthTransition(newFocusedDate);\n          return true;\n        }\n\n        return false;\n      }\n\n      return maybeTransitionPrevMonth;\n    }()\n  }, {\n    key: 'multiplyScrollableMonths',\n    value: function () {\n      function multiplyScrollableMonths(e) {\n        var onMultiplyScrollableMonths = this.props.onMultiplyScrollableMonths;\n        if (e) e.preventDefault();\n        if (onMultiplyScrollableMonths) onMultiplyScrollableMonths(e);\n        this.setState(function (_ref) {\n          var scrollableMonthMultiple = _ref.scrollableMonthMultiple;\n          return {\n            scrollableMonthMultiple: scrollableMonthMultiple + 1\n          };\n        });\n      }\n\n      return multiplyScrollableMonths;\n    }()\n  }, {\n    key: 'isHorizontal',\n    value: function () {\n      function isHorizontal() {\n        var orientation = this.props.orientation;\n        return orientation === _constants.HORIZONTAL_ORIENTATION;\n      }\n\n      return isHorizontal;\n    }()\n  }, {\n    key: 'isVertical',\n    value: function () {\n      function isVertical() {\n        var orientation = this.props.orientation;\n        return orientation === _constants.VERTICAL_ORIENTATION || orientation === _constants.VERTICAL_SCROLLABLE;\n      }\n\n      return isVertical;\n    }()\n  }, {\n    key: 'updateStateAfterMonthTransition',\n    value: function () {\n      function updateStateAfterMonthTransition() {\n        var _this4 = this;\n\n        var _props7 = this.props,\n            onPrevMonthClick = _props7.onPrevMonthClick,\n            onNextMonthClick = _props7.onNextMonthClick,\n            numberOfMonths = _props7.numberOfMonths,\n            onMonthChange = _props7.onMonthChange,\n            onYearChange = _props7.onYearChange,\n            isRTL = _props7.isRTL;\n        var _state7 = this.state,\n            currentMonth = _state7.currentMonth,\n            monthTransition = _state7.monthTransition,\n            focusedDate = _state7.focusedDate,\n            nextFocusedDate = _state7.nextFocusedDate,\n            withMouseInteractions = _state7.withMouseInteractions,\n            calendarMonthWidth = _state7.calendarMonthWidth;\n        if (!monthTransition) return;\n        var newMonth = currentMonth.clone();\n        var firstDayOfWeek = this.getFirstDayOfWeek();\n\n        if (monthTransition === PREV_TRANSITION) {\n          newMonth.subtract(1, 'month');\n          if (onPrevMonthClick) onPrevMonthClick(newMonth);\n          var newInvisibleMonth = newMonth.clone().subtract(1, 'month');\n          var numberOfWeeks = (0, _getNumberOfCalendarMonthWeeks2['default'])(newInvisibleMonth, firstDayOfWeek);\n          this.calendarMonthWeeks = [numberOfWeeks].concat(_toConsumableArray(this.calendarMonthWeeks.slice(0, -1)));\n        } else if (monthTransition === NEXT_TRANSITION) {\n          newMonth.add(1, 'month');\n          if (onNextMonthClick) onNextMonthClick(newMonth);\n\n          var _newInvisibleMonth = newMonth.clone().add(numberOfMonths, 'month');\n\n          var _numberOfWeeks = (0, _getNumberOfCalendarMonthWeeks2['default'])(_newInvisibleMonth, firstDayOfWeek);\n\n          this.calendarMonthWeeks = [].concat(_toConsumableArray(this.calendarMonthWeeks.slice(1)), [_numberOfWeeks]);\n        } else if (monthTransition === MONTH_SELECTION_TRANSITION) {\n          if (onMonthChange) onMonthChange(newMonth);\n        } else if (monthTransition === YEAR_SELECTION_TRANSITION) {\n          if (onYearChange) onYearChange(newMonth);\n        }\n\n        var newFocusedDate = null;\n\n        if (nextFocusedDate) {\n          newFocusedDate = nextFocusedDate;\n        } else if (!focusedDate && !withMouseInteractions) {\n          newFocusedDate = this.getFocusedDay(newMonth);\n        }\n\n        this.setState({\n          currentMonth: newMonth,\n          monthTransition: null,\n          translationValue: isRTL && this.isHorizontal() ? -calendarMonthWidth : 0,\n          nextFocusedDate: null,\n          focusedDate: newFocusedDate\n        }, function () {\n          // we don't want to focus on the relevant calendar day after a month transition\n          // if the user is navigating around using a mouse\n          if (withMouseInteractions) {\n            var activeElement = (0, _getActiveElement2['default'])();\n\n            if (activeElement && activeElement !== document.body && _this4.container.contains(activeElement) && activeElement.blur) {\n              activeElement.blur();\n            }\n          }\n        });\n      }\n\n      return updateStateAfterMonthTransition;\n    }()\n  }, {\n    key: 'adjustDayPickerHeight',\n    value: function () {\n      function adjustDayPickerHeight(newMonthHeight) {\n        var _this5 = this;\n\n        var monthHeight = newMonthHeight + MONTH_PADDING;\n\n        if (monthHeight !== this.calendarMonthGridHeight) {\n          this.transitionContainer.style.height = String(monthHeight) + 'px';\n\n          if (!this.calendarMonthGridHeight) {\n            setTimeout(function () {\n              _this5.setState({\n                hasSetHeight: true\n              });\n            }, 0);\n          }\n\n          this.calendarMonthGridHeight = monthHeight;\n        }\n      }\n\n      return adjustDayPickerHeight;\n    }()\n  }, {\n    key: 'calculateAndSetDayPickerHeight',\n    value: function () {\n      function calculateAndSetDayPickerHeight() {\n        var _props8 = this.props,\n            daySize = _props8.daySize,\n            numberOfMonths = _props8.numberOfMonths;\n        var monthTitleHeight = this.state.monthTitleHeight;\n        var visibleCalendarWeeks = this.calendarMonthWeeks.slice(1, numberOfMonths + 1);\n        var calendarMonthWeeksHeight = Math.max.apply(Math, [0].concat(_toConsumableArray(visibleCalendarWeeks))) * (daySize - 1);\n        var newMonthHeight = monthTitleHeight + calendarMonthWeeksHeight + 1;\n\n        if (this.isHorizontal()) {\n          this.adjustDayPickerHeight(newMonthHeight);\n        }\n      }\n\n      return calculateAndSetDayPickerHeight;\n    }()\n  }, {\n    key: 'openKeyboardShortcutsPanel',\n    value: function () {\n      function openKeyboardShortcutsPanel(onCloseCallBack) {\n        this.setState({\n          showKeyboardShortcuts: true,\n          onKeyboardShortcutsPanelClose: onCloseCallBack\n        });\n      }\n\n      return openKeyboardShortcutsPanel;\n    }()\n  }, {\n    key: 'closeKeyboardShortcutsPanel',\n    value: function () {\n      function closeKeyboardShortcutsPanel() {\n        var onKeyboardShortcutsPanelClose = this.state.onKeyboardShortcutsPanelClose;\n\n        if (onKeyboardShortcutsPanelClose) {\n          onKeyboardShortcutsPanelClose();\n        }\n\n        this.setState({\n          onKeyboardShortcutsPanelClose: null,\n          showKeyboardShortcuts: false\n        });\n      }\n\n      return closeKeyboardShortcutsPanel;\n    }()\n  }, {\n    key: 'renderNavigation',\n    value: function () {\n      function renderNavigation() {\n        var _props9 = this.props,\n            navPrev = _props9.navPrev,\n            navNext = _props9.navNext,\n            noNavButtons = _props9.noNavButtons,\n            orientation = _props9.orientation,\n            phrases = _props9.phrases,\n            isRTL = _props9.isRTL;\n\n        if (noNavButtons) {\n          return null;\n        }\n\n        var onNextMonthClick = orientation === _constants.VERTICAL_SCROLLABLE ? this.multiplyScrollableMonths : this.onNextMonthClick;\n        return _react2['default'].createElement(_DayPickerNavigation2['default'], {\n          onPrevMonthClick: this.onPrevMonthClick,\n          onNextMonthClick: onNextMonthClick,\n          navPrev: navPrev,\n          navNext: navNext,\n          orientation: orientation,\n          phrases: phrases,\n          isRTL: isRTL\n        });\n      }\n\n      return renderNavigation;\n    }()\n  }, {\n    key: 'renderWeekHeader',\n    value: function () {\n      function renderWeekHeader(index) {\n        var _props10 = this.props,\n            daySize = _props10.daySize,\n            horizontalMonthPadding = _props10.horizontalMonthPadding,\n            orientation = _props10.orientation,\n            weekDayFormat = _props10.weekDayFormat,\n            styles = _props10.styles;\n        var calendarMonthWidth = this.state.calendarMonthWidth;\n        var verticalScrollable = orientation === _constants.VERTICAL_SCROLLABLE;\n        var horizontalStyle = {\n          left: index * calendarMonthWidth\n        };\n        var verticalStyle = {\n          marginLeft: -calendarMonthWidth / 2\n        };\n        var weekHeaderStyle = {}; // no styles applied to the vertical-scrollable orientation\n\n        if (this.isHorizontal()) {\n          weekHeaderStyle = horizontalStyle;\n        } else if (this.isVertical() && !verticalScrollable) {\n          weekHeaderStyle = verticalStyle;\n        }\n\n        var firstDayOfWeek = this.getFirstDayOfWeek();\n        var header = [];\n\n        for (var i = 0; i < 7; i += 1) {\n          header.push(_react2['default'].createElement('li', _extends({\n            key: i\n          }, (0, _reactWithStyles.css)(styles.DayPicker_weekHeader_li, {\n            width: daySize\n          })), _react2['default'].createElement('small', null, (0, _moment2['default'])().day((i + firstDayOfWeek) % 7).format(weekDayFormat))));\n        }\n\n        return _react2['default'].createElement('div', _extends({}, (0, _reactWithStyles.css)(styles.DayPicker_weekHeader, this.isVertical() && styles.DayPicker_weekHeader__vertical, verticalScrollable && styles.DayPicker_weekHeader__verticalScrollable, weekHeaderStyle, {\n          padding: '0 ' + String(horizontalMonthPadding) + 'px'\n        }), {\n          key: 'week-' + String(index)\n        }), _react2['default'].createElement('ul', (0, _reactWithStyles.css)(styles.DayPicker_weekHeader_ul), header));\n      }\n\n      return renderWeekHeader;\n    }()\n  }, {\n    key: 'render',\n    value: function () {\n      function render() {\n        var _this6 = this;\n\n        var _state8 = this.state,\n            calendarMonthWidth = _state8.calendarMonthWidth,\n            currentMonth = _state8.currentMonth,\n            monthTransition = _state8.monthTransition,\n            translationValue = _state8.translationValue,\n            scrollableMonthMultiple = _state8.scrollableMonthMultiple,\n            focusedDate = _state8.focusedDate,\n            showKeyboardShortcuts = _state8.showKeyboardShortcuts,\n            isTouch = _state8.isTouchDevice,\n            hasSetHeight = _state8.hasSetHeight,\n            calendarInfoWidth = _state8.calendarInfoWidth,\n            monthTitleHeight = _state8.monthTitleHeight;\n        var _props11 = this.props,\n            enableOutsideDays = _props11.enableOutsideDays,\n            numberOfMonths = _props11.numberOfMonths,\n            orientation = _props11.orientation,\n            modifiers = _props11.modifiers,\n            withPortal = _props11.withPortal,\n            onDayClick = _props11.onDayClick,\n            onDayMouseEnter = _props11.onDayMouseEnter,\n            onDayMouseLeave = _props11.onDayMouseLeave,\n            firstDayOfWeek = _props11.firstDayOfWeek,\n            renderMonthText = _props11.renderMonthText,\n            renderCalendarDay = _props11.renderCalendarDay,\n            renderDayContents = _props11.renderDayContents,\n            renderCalendarInfo = _props11.renderCalendarInfo,\n            renderMonthElement = _props11.renderMonthElement,\n            calendarInfoPosition = _props11.calendarInfoPosition,\n            hideKeyboardShortcutsPanel = _props11.hideKeyboardShortcutsPanel,\n            onOutsideClick = _props11.onOutsideClick,\n            monthFormat = _props11.monthFormat,\n            daySize = _props11.daySize,\n            isFocused = _props11.isFocused,\n            isRTL = _props11.isRTL,\n            styles = _props11.styles,\n            theme = _props11.theme,\n            phrases = _props11.phrases,\n            verticalHeight = _props11.verticalHeight,\n            dayAriaLabelFormat = _props11.dayAriaLabelFormat,\n            noBorder = _props11.noBorder,\n            transitionDuration = _props11.transitionDuration,\n            verticalBorderSpacing = _props11.verticalBorderSpacing,\n            horizontalMonthPadding = _props11.horizontalMonthPadding;\n        var dayPickerHorizontalPadding = theme.reactDates.spacing.dayPickerHorizontalPadding;\n        var isHorizontal = this.isHorizontal();\n        var numOfWeekHeaders = this.isVertical() ? 1 : numberOfMonths;\n        var weekHeaders = [];\n\n        for (var i = 0; i < numOfWeekHeaders; i += 1) {\n          weekHeaders.push(this.renderWeekHeader(i));\n        }\n\n        var verticalScrollable = orientation === _constants.VERTICAL_SCROLLABLE;\n        var height = void 0;\n\n        if (isHorizontal) {\n          height = this.calendarMonthGridHeight;\n        } else if (this.isVertical() && !verticalScrollable && !withPortal) {\n          // If the user doesn't set a desired height,\n          // we default back to this kind of made-up value that generally looks good\n          height = verticalHeight || 1.75 * calendarMonthWidth;\n        }\n\n        var isCalendarMonthGridAnimating = monthTransition !== null;\n        var shouldFocusDate = !isCalendarMonthGridAnimating && isFocused;\n        var keyboardShortcutButtonLocation = _DayPickerKeyboardShortcuts.BOTTOM_RIGHT;\n\n        if (this.isVertical()) {\n          keyboardShortcutButtonLocation = withPortal ? _DayPickerKeyboardShortcuts.TOP_LEFT : _DayPickerKeyboardShortcuts.TOP_RIGHT;\n        }\n\n        var shouldAnimateHeight = isHorizontal && hasSetHeight;\n        var calendarInfoPositionTop = calendarInfoPosition === _constants.INFO_POSITION_TOP;\n        var calendarInfoPositionBottom = calendarInfoPosition === _constants.INFO_POSITION_BOTTOM;\n        var calendarInfoPositionBefore = calendarInfoPosition === _constants.INFO_POSITION_BEFORE;\n        var calendarInfoPositionAfter = calendarInfoPosition === _constants.INFO_POSITION_AFTER;\n        var calendarInfoIsInline = calendarInfoPositionBefore || calendarInfoPositionAfter;\n\n        var calendarInfo = renderCalendarInfo && _react2['default'].createElement('div', _extends({\n          ref: this.setCalendarInfoRef\n        }, (0, _reactWithStyles.css)(calendarInfoIsInline && styles.DayPicker_calendarInfo__horizontal)), renderCalendarInfo());\n\n        var calendarInfoPanelWidth = renderCalendarInfo && calendarInfoIsInline ? calendarInfoWidth : 0;\n        var firstVisibleMonthIndex = this.getFirstVisibleIndex();\n        var wrapperHorizontalWidth = calendarMonthWidth * numberOfMonths + 2 * dayPickerHorizontalPadding; // Adding `1px` because of whitespace between 2 inline-block\n\n        var fullHorizontalWidth = wrapperHorizontalWidth + calendarInfoPanelWidth + 1;\n        var transitionContainerStyle = {\n          width: isHorizontal && wrapperHorizontalWidth,\n          height: height\n        };\n        var dayPickerWrapperStyle = {\n          width: isHorizontal && wrapperHorizontalWidth\n        };\n        var dayPickerStyle = {\n          width: isHorizontal && fullHorizontalWidth,\n          // These values are to center the datepicker (approximately) on the page\n          marginLeft: isHorizontal && withPortal ? -fullHorizontalWidth / 2 : null,\n          marginTop: isHorizontal && withPortal ? -calendarMonthWidth / 2 : null\n        };\n        return _react2['default'].createElement('div', _extends({\n          role: 'application',\n          'aria-label': phrases.calendarLabel\n        }, (0, _reactWithStyles.css)(styles.DayPicker, isHorizontal && styles.DayPicker__horizontal, verticalScrollable && styles.DayPicker__verticalScrollable, isHorizontal && withPortal && styles.DayPicker_portal__horizontal, this.isVertical() && withPortal && styles.DayPicker_portal__vertical, dayPickerStyle, !monthTitleHeight && styles.DayPicker__hidden, !noBorder && styles.DayPicker__withBorder)), _react2['default'].createElement(_reactOutsideClickHandler2['default'], {\n          onOutsideClick: onOutsideClick\n        }, (calendarInfoPositionTop || calendarInfoPositionBefore) && calendarInfo, _react2['default'].createElement('div', (0, _reactWithStyles.css)(dayPickerWrapperStyle, calendarInfoIsInline && isHorizontal && styles.DayPicker_wrapper__horizontal), _react2['default'].createElement('div', _extends({}, (0, _reactWithStyles.css)(styles.DayPicker_weekHeaders, isHorizontal && styles.DayPicker_weekHeaders__horizontal), {\n          'aria-hidden': 'true',\n          role: 'presentation'\n        }), weekHeaders), _react2['default'].createElement('div', _extends({}, (0, _reactWithStyles.css)(styles.DayPicker_focusRegion), {\n          ref: this.setContainerRef,\n          onClick: function () {\n            function onClick(e) {\n              e.stopPropagation();\n            }\n\n            return onClick;\n          }(),\n          onKeyDown: this.onKeyDown,\n          onMouseUp: function () {\n            function onMouseUp() {\n              _this6.setState({\n                withMouseInteractions: true\n              });\n            }\n\n            return onMouseUp;\n          }(),\n          role: 'region',\n          tabIndex: -1\n        }), !verticalScrollable && this.renderNavigation(), _react2['default'].createElement('div', _extends({}, (0, _reactWithStyles.css)(styles.DayPicker_transitionContainer, shouldAnimateHeight && styles.DayPicker_transitionContainer__horizontal, this.isVertical() && styles.DayPicker_transitionContainer__vertical, verticalScrollable && styles.DayPicker_transitionContainer__verticalScrollable, transitionContainerStyle), {\n          ref: this.setTransitionContainerRef\n        }), _react2['default'].createElement(_CalendarMonthGrid2['default'], {\n          setMonthTitleHeight: !monthTitleHeight ? this.setMonthTitleHeight : undefined,\n          translationValue: translationValue,\n          enableOutsideDays: enableOutsideDays,\n          firstVisibleMonthIndex: firstVisibleMonthIndex,\n          initialMonth: currentMonth,\n          isAnimating: isCalendarMonthGridAnimating,\n          modifiers: modifiers,\n          orientation: orientation,\n          numberOfMonths: numberOfMonths * scrollableMonthMultiple,\n          onDayClick: onDayClick,\n          onDayMouseEnter: onDayMouseEnter,\n          onDayMouseLeave: onDayMouseLeave,\n          onMonthChange: this.onMonthChange,\n          onYearChange: this.onYearChange,\n          renderMonthText: renderMonthText,\n          renderCalendarDay: renderCalendarDay,\n          renderDayContents: renderDayContents,\n          renderMonthElement: renderMonthElement,\n          onMonthTransitionEnd: this.updateStateAfterMonthTransition,\n          monthFormat: monthFormat,\n          daySize: daySize,\n          firstDayOfWeek: firstDayOfWeek,\n          isFocused: shouldFocusDate,\n          focusedDate: focusedDate,\n          phrases: phrases,\n          isRTL: isRTL,\n          dayAriaLabelFormat: dayAriaLabelFormat,\n          transitionDuration: transitionDuration,\n          verticalBorderSpacing: verticalBorderSpacing,\n          horizontalMonthPadding: horizontalMonthPadding\n        }), verticalScrollable && this.renderNavigation()), !isTouch && !hideKeyboardShortcutsPanel && _react2['default'].createElement(_DayPickerKeyboardShortcuts2['default'], {\n          block: this.isVertical() && !withPortal,\n          buttonLocation: keyboardShortcutButtonLocation,\n          showKeyboardShortcutsPanel: showKeyboardShortcuts,\n          openKeyboardShortcutsPanel: this.openKeyboardShortcutsPanel,\n          closeKeyboardShortcutsPanel: this.closeKeyboardShortcutsPanel,\n          phrases: phrases\n        }))), (calendarInfoPositionBottom || calendarInfoPositionAfter) && calendarInfo));\n      }\n\n      return render;\n    }()\n  }]);\n\n  return DayPicker;\n}(_baseClass2['default']);\n\nDayPicker.propTypes = propTypes;\nDayPicker.defaultProps = defaultProps;\nexports.PureDayPicker = DayPicker;\nexports['default'] = (0, _reactWithStyles.withStyles)(function (_ref2) {\n  var _ref2$reactDates = _ref2.reactDates,\n      color = _ref2$reactDates.color,\n      font = _ref2$reactDates.font,\n      noScrollBarOnVerticalScrollable = _ref2$reactDates.noScrollBarOnVerticalScrollable,\n      spacing = _ref2$reactDates.spacing,\n      zIndex = _ref2$reactDates.zIndex;\n  return {\n    DayPicker: {\n      background: color.background,\n      position: 'relative',\n      textAlign: 'left'\n    },\n    DayPicker__horizontal: {\n      background: color.background\n    },\n    DayPicker__verticalScrollable: {\n      height: '100%'\n    },\n    DayPicker__hidden: {\n      visibility: 'hidden'\n    },\n    DayPicker__withBorder: {\n      boxShadow: '0 2px 6px rgba(0, 0, 0, 0.05), 0 0 0 1px rgba(0, 0, 0, 0.07)',\n      borderRadius: 3\n    },\n    DayPicker_portal__horizontal: {\n      boxShadow: 'none',\n      position: 'absolute',\n      left: '50%',\n      top: '50%'\n    },\n    DayPicker_portal__vertical: {\n      position: 'initial'\n    },\n    DayPicker_focusRegion: {\n      outline: 'none'\n    },\n    DayPicker_calendarInfo__horizontal: {\n      display: 'inline-block',\n      verticalAlign: 'top'\n    },\n    DayPicker_wrapper__horizontal: {\n      display: 'inline-block',\n      verticalAlign: 'top'\n    },\n    DayPicker_weekHeaders: {\n      position: 'relative'\n    },\n    DayPicker_weekHeaders__horizontal: {\n      marginLeft: spacing.dayPickerHorizontalPadding\n    },\n    DayPicker_weekHeader: {\n      color: color.placeholderText,\n      position: 'absolute',\n      top: 62,\n      zIndex: zIndex + 2,\n      textAlign: 'left'\n    },\n    DayPicker_weekHeader__vertical: {\n      left: '50%'\n    },\n    DayPicker_weekHeader__verticalScrollable: {\n      top: 0,\n      display: 'table-row',\n      borderBottom: '1px solid ' + String(color.core.border),\n      background: color.background,\n      marginLeft: 0,\n      left: 0,\n      width: '100%',\n      textAlign: 'center'\n    },\n    DayPicker_weekHeader_ul: {\n      listStyle: 'none',\n      margin: '1px 0',\n      paddingLeft: 0,\n      paddingRight: 0,\n      fontSize: font.size\n    },\n    DayPicker_weekHeader_li: {\n      display: 'inline-block',\n      textAlign: 'center'\n    },\n    DayPicker_transitionContainer: {\n      position: 'relative',\n      overflow: 'hidden',\n      borderRadius: 3\n    },\n    DayPicker_transitionContainer__horizontal: {\n      transition: 'height 0.2s ease-in-out'\n    },\n    DayPicker_transitionContainer__vertical: {\n      width: '100%'\n    },\n    DayPicker_transitionContainer__verticalScrollable: (0, _object2['default'])({\n      paddingTop: 20,\n      height: '100%',\n      position: 'absolute',\n      top: 0,\n      bottom: 0,\n      right: 0,\n      left: 0,\n      overflowY: 'scroll'\n    }, noScrollBarOnVerticalScrollable && {\n      '-webkitOverflowScrolling': 'touch',\n      '::-webkit-scrollbar': {\n        '-webkit-appearance': 'none',\n        display: 'none'\n      }\n    })\n  };\n}, {\n  pureComponent: _baseClass.pureComponentAvailable\n})(DayPicker);","map":null,"metadata":{},"sourceType":"script"}